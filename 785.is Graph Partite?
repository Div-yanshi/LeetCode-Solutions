class Solution {
    public boolean isBipartite(int[][] graph) {
        int n=graph.length;
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        for(int i=0;i<n;i++)
        {
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<n;i++)
        {
            for(int nei:graph[i])
            {
                  adj.get(i).add(nei);
           }
        }
            int col[]=new int[n];
            for(int i=0;i<n;i++)
            {
              col[i]=-1;
            }
            for(int i=0;i<n;i++)
            {
                if(col[i]==-1)
                {
                    if(bfs(i,n,adj,col)==false)
                    return false;
                }
            }
            return true;


        
    }
    private static boolean bfs(int i,int n,ArrayList<ArrayList<Integer>> adj,int[] col)
    {
        Queue<Integer> q=new LinkedList<>();
        q.add(i);
        col[i]=0;
        while(!q.isEmpty())
        {
            int node=q.peek();
            q.remove();
            for(int it:adj.get(node))
            {
                if(col[it]==-1)
                {
                    col[it]=1-col[node];
                   q.add(it);

                }
                if(col[it]==col[node])
                return false;

            }
            

        }
        return true;
    }
}
