class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
  int[] candidates = new int[9]; 

        for (int i = 0; i < candidates.length; i++) {
            candidates[i] = i + 1;}
    List<List<Integer>> ans=new ArrayList<>();
    Arrays.sort(candidates);
        findcomb(0,n,candidates,k,new ArrayList<>(),ans);
        return ans;
        
        
    }
    private void findcomb(int ind,int t,int[] arr,int k,List<Integer> ds,List<List<Integer>> ans)
    {
       
        if(t==0 && k==0)
        {
            ans.add(new ArrayList<>(ds));
            return;
            
        }if(ind>=9 || k<0)
        return;
        if(arr[ind]<=t)
        {
            ds.add(arr[ind]);
            findcomb(ind+1,t-arr[ind],arr,k-1,ds,ans);
            ds.remove(ds.size()-1);

        }findcomb(ind+1,t,arr,k,ds,ans);
     

    }

}
   
