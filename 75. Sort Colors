/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
         if(head==null || head.next==null)
         return head;
         ListNode mid=getMid(head);
         ListNode left=sortList(head);
         ListNode right=sortList(mid);
         return merge(left,right);
    }
    ListNode merge(ListNode list1,ListNode list2)
    {ListNode dummy=new ListNode(0);
    ListNode temp=dummy;
        while(list1!=null && list2!=null)
        {
            if(list1.val<list2.val)
            {
                temp.next=list1;
                list1=list1.next;
                temp=temp.next;


            }
            else
            {

                temp.next=list2;
                list2=list2.next;
                temp=temp.next;

            }}
            if(list1!=null)
            {
                temp.next=list1;
            }
            else
            temp.next=list2;

        return dummy.next;
    }

     ListNode getMid(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        ListNode prev = null;  

        // Move slow by 1 step and fast by 2 steps
        while (fast != null && fast.next != null) {
            prev = slow;       // Store the node before slow
            slow = slow.next;  // Move slow by 1 step
            fast = fast.next.next;  // Move fast by 2 steps
        }

        // Split the list into two halves
        if (prev != null) {
            prev.next = null;  // Break the list at `prev.next`
        }

        return slow;  // Return the start of the second half (mid)
    }
      }   

        
    
