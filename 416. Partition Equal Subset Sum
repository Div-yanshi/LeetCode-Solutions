class Solution {
    public boolean canPartition(int[] arr) {
  int n=arr.length;
  int s=0,target;
      for(int i=0;i<n;i++)
      {
        s=s+arr[i];
      }
      if(s%2==1)
      return false;
      else
      target=s/2;
  int dp[][]=new int[n][target+1];
  for(int i=0;i<n;i++)
  {
      for(int j=0;j<=target;j++)
      {
          dp[i][j]=-1;
      }
  }return (f(n-1,target,arr,dp)==1);
  
        // code here
    }
    private static int f(int ind,int k,int[] a,int[][] dp)
    {
        if(k==0)
        return 1;
        if(ind==0)
        if( a[ind]==k)
        return 1;
        else return 0;
            
        if(dp[ind][k]!=-1)
        return dp[ind][k];
        int nt =f(ind-1,k,a,dp);
        int t=0;
        if(k>=a[ind])
        t=f(ind-1,k-a[ind],a,dp);
       if(t==1 ||nt==1)
       return dp[ind][k]=1;
       else
       return dp[ind][k]=0;
        
    }
}
