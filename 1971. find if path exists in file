class Solution {
    public boolean validPath(int n, int[][] edges, int source, int destination) {
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        for(int i=0;i<n;i++)
        adj.add(new ArrayList<>());
        for(int i=0;i<edges.length;i++){
        adj.get(edges[i][0]).add(edges[i][1]);
         adj.get(edges[i][1]).add(edges[i][0]);}
        Queue<Integer> q=new LinkedList<>();
        boolean vis[]=new boolean[n];
        q.add(source);
        vis[source]=true;
        while(!q.isEmpty())
        {int node=q.poll();
        for(int it:adj.get(node))
        if(vis[it]==false)
        {
            vis[it]=true;
            q.add(it);
            if(it==destination)
            return true;
        }



        }
        if(source ==destination)
        return true;
       
        return false;
 
    }
}
