class Solution {
    public void solve(char[][] board) {
        int m=board.length;
        int n=board[0].length;
        int vis[][]=new int[m][n];
        for(int i=0;i<n;i++)
        {
            if(board[0][i]=='O')
            bfs(0,i,vis,board);
            if(board[m-1][i]=='O')
            bfs(m-1,i,vis,board);

        }
         for(int i=0;i<m;i++)
{
    
            if(board[i][0]=='O')
            bfs(i,0,vis,board);
            if(board[i][n-1]=='O')
            bfs(i,n-1,vis,board);

}
for(int i=1;i<m-1;i++)
{
    for(int j=1;j<n-1;j++)
    {
        if(vis[i][j]!=1)
        board[i][j]='X';

    }
}



        
    }
    private void bfs(int row,int col,int[][] vis,char[][] board)
    {
         int m=board.length;
        int n=board[0].length;
        vis[row][col]=1;
        Queue<Pair> q=new LinkedList<>();
        q.add(new Pair(row,col));
        while(!q.isEmpty())
        {
            int r=q.peek().first;
            int c=q.peek().sec;
            q.remove();
            int a[]={-1,0,0,1};
            int b[]={0,-1,1, 0};
            for(int i=0;i<a.length;i++){
                int delrow=r+a[i];
                int delcol=c+b[i];
                if(delrow>=0 && delcol<n && delrow<m && delcol>=0 && board[delrow][delcol]=='O' && vis[delrow][delcol]!=1)
                {
                    q.add(new Pair(delrow,delcol));
                    vis[delrow][delcol]=1;
                }
            }
        }
    }
}
class Pair
{
    int first;
    int sec;
    public Pair(int first,int sec)
    {
        this.first=first;
        this.sec=sec;
    }
}
