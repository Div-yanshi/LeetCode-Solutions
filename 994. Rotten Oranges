class Solution {
    public int orangesRotting(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
    int vis[][]=new int[n][m];
    Queue<Pair> q=new LinkedList<>();
    int cntf=0;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(grid[i][j]==2)
            {
                q.add(new Pair(i,j,0));
                vis[i][j]=2;
            }
            else
            {
                vis[i][j]=0;
            }
            if(grid[i][j]==1)
           cntf++;

        }
    }
       int tm=0,cnt=0;
       int dr[]={-1,0,0,+1};
       int dc[]={0,1,-1,0};

       while(!q.isEmpty())
       {
        int r=q.peek().row;
        int c=q.peek().col;
        int t=q.peek().tm;
        tm=Math.max(tm,t);
        q.remove();
        for(int i=0;i<dr.length;i++)
        {
            int nrow=r+dr[i];
            int ncol=c+dc[i];
     if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]==1 && vis[nrow][ncol]!=2)
     {
        q.add(new Pair(nrow,ncol,t+1));
        vis[nrow][ncol]=2;
        cnt++;
     }

        }
       }
       if(cntf!=cnt)
       return -1;
       return tm;
    }
}
class Pair
{
    int row,col,tm;
    Pair(int row,int col,int tm)
    {
        this.row=row;
        this.col=col;
        this.tm=tm;
    }
}
